package for_linked_list_lab1;//File: WCSLinkedList.java/**A class for maintaining a linked list. Currently it only contains a constructor forcreating a list and a toString method used to display the entire list.*/public class WCSLinkedList < E extends Comparable<E>> {	/**	 * a reference to the NOde at the head of thr list	 */	Node<E> myHead;//reference to the first Node in the list		/**	 * used to indicate that an attempted addition to the list was successful or not 	 */	private boolean addSuccessful;		/**	 * Zero parameter constructor sets myHead and myComparator to null	 */	public WCSLinkedList () {		myHead = null;	}//0 parameter constructor		/**	 * 	 */	public String toString() {		Node<E> mover = myHead;		String tempS = "";		while(mover != null) {			tempS += mover.getData().toString();			mover = mover.getLink();		}//while		return tempS;	}//toString		private String toString (Node<E> currentHead) {		if (currentHead == null) {			return "";		}//end of list 		return currentHead.getData() + " " + toString(currentHead.getLink());	}//toString		//write the method toStringEveryOther here	public String toStringEveryOther() {		String toReturn = "";		Node<E> mover = myHead;		while (mover != null) {			toReturn += mover.getData().toString();			mover = mover.getLink();			if(mover!= null) {				mover = mover.getLink();							}//if		}//while		return toReturn;		} //toString		//write the method toStringGrtThan here	public String toStringGrtThan(E objectcompared) {		String toReturn = "";		Node<E> mover = myHead;		while (mover.getLink() != null) {			if ((mover.getData().compareTo(objectcompared))< 0) {			toReturn += mover.getData().toString();			}			mover = mover.getLink();		}//while		return toReturn;		} //toString	}//WCSLinkedList