package for_linked_list_lab1;//File: TestWCSLinkedList.java/*A class for testing the WCSLinkedList class. Currently it  constructs anobject of class WCSLinkedList, and contains some code for steps 7 through 14.  */public class TestWCSLinkedList {	public static void main (String args[]) {		WCSLinkedList<String> myList = new WCSLinkedList<>();				//complete Step 7 here		myList.myHead = new Node<>("B");		System.out.println("after inserting B:\n" + myList);		myList.myHead.setLink(new Node< >("G"));		myList.myHead.getLink() .setLink(new Node< >("K"));		System.out.println("after inserting B, G, and K:\n" + myList);				//complete Step 8 here		Node<String> temp = new Node<>("D", myList.myHead.getLink());		myList.myHead.setLink(temp);		myList.myHead.getLink().getLink().setLink(				new Node< >("J",myList.myHead.getLink().getLink().getLink()));		System.out.println("after inserting B, D, G, J, and K:\n" + myList);			//complete Step 9 here		Node<String> tempPtr = new Node<>("A");		tempPtr.setLink(myList.myHead);		myList.myHead = tempPtr;//for inserting A at the start of the line				Node<String> mover = myList.myHead;		while (mover.getLink() != null) {		mover = mover.getLink();		} //while		mover.setLink(new Node< >("Z"));//for inserting Z at the end of the line  		System.out.println("after inserting A, B, D, G, J, K, and Z:\n" + myList);				//complete Step 10 here		String toReturn = "";		Node<String> pointer = myList.myHead;		while (pointer != null && !pointer.getData().equals("G")) {			toReturn += pointer.getData() + " ";			pointer = pointer.getLink();		}		System.out.println("The first three Nodes in the list:\n" + toReturn);				//complete Step 11 here		myList.myHead.getLink().setLink(myList.myHead.getLink().getLink().getLink());		System.out.println("after deleting D:\n" + myList);				//complete Step 12 here		myList.myHead = myList.myHead.getLink();		System.out.println("after deleting A:\n" + myList);				//complete Step 13 here		myList.myHead.getLink().getLink().getLink().setLink(null);		System.out.println("after deleting Z:\n" + myList);				//complete Step 14 here				myList.myHead.setLink(myList.myHead.getLink().getLink().getLink());		System.out.println("after deleting G and J:\n" + myList);				// Rebuild the list with A, B, E, R, and T		myList.myHead = new Node< >("A");		myList.myHead.setLink(new Node< >("B"));		myList.myHead.getLink().setLink(new Node< >("E"));		myList.myHead.getLink().getLink().setLink(new Node< >("R"));		myList.myHead.getLink().getLink().getLink().setLink(new Node< >("T"));		System.out.println("The new list with ABERT:\n" + myList);				// Test your method toStringEveryOther here		System.out.println("The new list which displays everyother link in ABERT:\n"+myList.toStringEveryOther());						// Test your method toStringGrtThan here		System.out.println("The new list which displays everyother link greater than A in ABERT:\n"+ myList.toStringGrtThan("A"));	}  //main	} //TestWCSLinkedList				