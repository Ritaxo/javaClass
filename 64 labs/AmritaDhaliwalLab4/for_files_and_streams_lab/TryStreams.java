// To test reading from and writing to filespackage for_files_and_streams_lab;import java.awt.*;import java.awt.event.*;import java.io.*;import javax.swing.*;public class TryStreams extends JFrame {	private JLabel promptL, resultsL;	private JPanel inputP, outputP, buttonP;	private JTextField inputTF;	private JTextArea outputTA;	private JScrollPane outputSP;	private JButton readB, saveB;	private DataInputStream input;	private DataOutputStream output;	private int myInt;	private double myDouble;	private String myString;	private Container myCP;	public TryStreams() {		super("Reading From and Writing To Files via Streams");		myCP = getContentPane();		setSize(400,300);		setLocation(100,100);		inputP = new JPanel(new GridLayout(2,1));		myCP.add(inputP, BorderLayout.NORTH);		promptL = new JLabel("Enter the File name here:");		inputP.add(promptL);		inputTF = new JTextField(30);		inputP.add(inputTF);		outputP = new JPanel(new GridLayout(2,1));		myCP.add(outputP,BorderLayout.CENTER);		resultsL = new JLabel( "Messages:", JLabel.CENTER);		outputP.add(resultsL);		outputTA = new JTextArea();		outputSP = new JScrollPane(outputTA,				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);		outputSP.setPreferredSize(new Dimension(200,100));		outputP.add(outputSP); 		buttonP = new JPanel(new GridLayout(1,2));		myCP.add(buttonP,BorderLayout.SOUTH);		readB = new JButton ("Read File");		buttonP.add(readB);		readB.addActionListener(new ReadBHandler());		saveB = new JButton ("Save File");		buttonP.add(saveB);		saveB.addActionListener(new SaveBHandler());		setVisible(true);		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent e) {				System.exit(0);			}//windowClosing		}); //end of definition of WindowAdapter and semicolon to end the line 	}//constructor 	class ReadBHandler implements ActionListener {		public void actionPerformed (ActionEvent e) {			String fileName = inputTF.getText();			File dataFile = new File (fileName);			if(!dataFile.exists()) {				outputTA.append("The file "+ fileName+" is not associated with the name of any file or directory:\n");				}//to check if something with the specified name exists 			else if(!dataFile.isFile()) {				outputTA.append("The file "+ fileName+" exists but is not a file \n");				}//to check if the associated name is a file  			else if(!dataFile.canRead()) {				outputTA.append("The file "+ fileName+" exists and is a file but cannot be read\n");				}else {				try {					input = new DataInputStream(new FileInputStream(fileName));					myInt = input.readInt();					myDouble = input.readDouble();					myString = input.readUTF();					outputTA.append("Values from file are:\n" + myInt + "\n"							+ myDouble + "\n" + myString + "\n");				}// try				catch(IOException iOE) {					outputTA.append("Error in reading from file: "+ fileName);				}//catch			}//else			inputTF.setText("");			inputTF.requestFocus();		}//actionPerformed	}//class ReadBHandler	class SaveBHandler implements ActionListener {		public void actionPerformed (ActionEvent e) {			String fileName = inputTF.getText();			File dataFile = new File (fileName);			if (dataFile.exists() && dataFile.isFile() && !dataFile.canWrite()) {					outputTA.append("The file "+ fileName+" cannot be overwritten\n");					}else if (dataFile.exists() && !dataFile.isFile()) {				outputTA.append("The file "+ fileName+" is not a file\n");					}else {				if (dataFile.exists() && dataFile.isFile() && dataFile.canWrite()) {					outputTA.append("The file "+ fileName+" is being overwritten\n");				}//if need overwritten message				try {					output = new DataOutputStream(new FileOutputStream(fileName));					output.writeInt(9876);					output.writeDouble(123.456);					output.writeUTF("Hello");					outputTA.append("Values written to file are:\n" + "9876\n"							+ "123.456\n" + "Hello\n");				}// try				catch(IOException iOE) {					outputTA.append("Error in writing to file: "+ fileName);				}//catch			}//if we are going to write to the file			inputTF.setText("");			inputTF.requestFocus();		}//actionPerformed	}//class SaveBHandler	public static void main (String args[]) {		TryStreams myApp = new TryStreams();	}//main}//TryStreams class