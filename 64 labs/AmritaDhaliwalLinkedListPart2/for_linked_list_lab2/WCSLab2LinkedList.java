package for_linked_list_lab2;//File: WCSLab2LinkedList.java /*A class for maintaining a linked list. Currently it only contains a constructor forcreating the list, an addLIFO method that adds a new Node at the head of the listand a toString method to return a String representation of the entire list.*/public class WCSLab2LinkedList<E extends Comparable<E>> {	private Node<E> myHead;		public WCSLab2LinkedList () {		myHead = null;	}  //0 parameter constructor		public void addLIFO(E theData) {//Note that this add method has void return type		myHead = new Node<E>(theData, myHead);	}  //addLIFO		public String toString() {		Node mover = myHead;		String tempS = "";		while(mover != null) {			tempS += mover.getData().toString() +"\n";			mover = mover.getLink();		}//while		return tempS;	}  //toString	/**	 * Gives the number of items in the list 	 * @returns an int named count	 */	public int getItemCount() {		int count = 0;		Node <E> current  = myHead;		while (current!=null) {			count++;			current = current.getLink();		}		return count;	}//getItemCount		/**	 * Displays each element in the list with its position 	 * @return returns a string displaying numbers and elements 	 */	public String numberedToString(){		Node mover = myHead;		int count = 1;		String tempS = "";		while(mover != null) {			tempS += count + ". "+mover.getData().toString() +"\n";			mover = mover.getLink();			count++;		}//while		return tempS;	}		/**	 * This method helps get the data at the int posInList from the list. 	 * @param posInList - the position given by user, used to find the element in the list	 * @return A string with either the data of the element at the position or null.	 */	public String dataAtPos (int posInList) {		Node mover = myHead;		int count = 1;		String tempS = "";		while(mover != null) {			if (count == posInList ) {			return	tempS = mover.getData().toString();			}			mover = mover.getLink();			count++;			tempS = null;		}//while		return tempS;	}		/**	 * This method gives the first position at which the param possibleData occurs. 	 * @param possibleData - A string param represents a posiible data 	 * @return either returns thr position of data or 0.	 */	public int positionFirstOccurence (String possibleData) {		Node mover = myHead;		int count = 1;		while(mover != null) {			if (mover.getData().toString() == possibleData ) {			return	count;			}			mover = mover.getLink();			count++;		}//while		return count = 0;	}		/**	 * Rotates the linked list so that the last node becomes the first and the first becomes the last.	 */	public void rotate(){	if (myHead != null && myHead.getLink() != null) {		Node <E> trailer = myHead;		Node <E> mover =myHead.getLink();		while(mover.getLink() != null) {			trailer = mover;			mover = mover.getLink();		}//while		trailer.setLink(null);		mover.setLink(myHead);		myHead = mover;		}	}	/**	 * Goes over the list and gives out how many times possibleData occurs in the list	 * @param possibleData	 * @return an int value representing the count of the matches. 	 */	public int countMatches(String possibleData) {		Node mover = myHead;		int result =0;		while(mover != null) {			if (mover.getData().toString() == possibleData ) {				result += 1;			}			mover = mover.getLink();		}//while		return result;	}		/**	 * Reverses the linked list. 	 */	public void reverse() {		Node mover = myHead;		myHead = null;		while(mover != null) {			Node tempPtr = new Node (mover.getData(),mover.getLink());			tempPtr.setLink(myHead);			myHead = tempPtr;			mover = mover.getLink();		}//while	}	}//WCSLab2LinkedList