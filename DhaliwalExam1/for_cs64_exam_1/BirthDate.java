package for_cs64_exam_1;/** * A class to store a birthdate. Month and day are required, year is optional. * @author Barbara Li Santi * */public class BirthDate implements Comparable<BirthDate>{	/**	 * int representation of the birth month.	 */	private int myMonth;	/**	 * int representation of the birth day.	 */	private int myDay; 	/**	 * int representation of the birth year (defaults to 0).	 */	private int myYear;	/**	 * The maximum days in each month.	 */	public static final int MONTH_MAX_DAYS[] =		{0,31,29,31,30,31,30,31,31,30,31,30,31};	/**	 * The months as represented by Strings.	 */	public static final String MONTH_NAMES[] =		{"an unknown month", "January", "February", "March", "April", 				"May", "June", "July", "August", "September", 				"October", "November", "December"};	/**	 * A birthdate including the optional year.	 * @param theMonth The month of birth.	 * @param theDay The day of birth within the month.	 * @param theYear The year of birth.	 */	public BirthDate(int theMonth, int theDay, int theYear){		myMonth = theMonth;		myDay = theDay;		myYear = theYear;	}//3-parameter constructor	/**	 * A birthdate without the optional year (defaulted to 0).	 * @param theMonth The month of birth.	 * @param theDay The day of birth within the month.	 */	public BirthDate(int theMonth, int theDay){		myMonth = theMonth;		myDay = theDay;		myYear = 0;	}//2-parameter constructor	/**	 * A default birthdate with month, day, and year as 0 	 */	public BirthDate(){		myMonth = 0;		myDay = 0;		myYear = 0;	}//0-parameter constructor	/**	 * Access method for the month.	 * @return Returns the month of the birthdate.	 */	public int getMonth(){		return myMonth;	}//getMonth	/**	 * Access method for the day.	 * @return Returns the day of the birthdate.	 */	public int getDay(){		return myDay;	}//getDay	/**	 * Access method for the year.	 * @return Returns the year of the birthdate.	 */	public int getYear(){		return myYear;	}//getYear	/**	 * Modifier method for the month. Checks that the new month is within the range of months,	 * and sets the day to the last day of the month if it was a day that does not exist in the new month	 * (for example, January 31 -> September 30).	 * @param theMonth The new month for the birthdate.	 */	public void setMonth(int theMonth){		if(theMonth > 12 || theMonth < 1){			System.out.println("The month's new value was out of range. There was no change.");		}else{			myMonth = theMonth;			if(myDay > MONTH_MAX_DAYS[myMonth]){				myDay = MONTH_MAX_DAYS[myMonth];			}//if day needed to change		}//else	}//setMonth	/**	 * Modifier method for the day. Checks that the day is viable for the birthdate's month.	 * @param theDay The new day for the birthdate.	 */	public void setDay(int theDay){		if(theDay < 0 || theDay > MONTH_MAX_DAYS[myMonth]){			System.out.println("The value for the day was out of range. The day is unchanged.");		}else{			myDay = theDay;		}//else	}//setDay	/**	 * Modifier method for the year. Changes the year of the birthdate.	 * @param theYear The new year for the birthdate.	 */	public void setYear(int theYear){		myYear = theYear;	}//setYear	/**	 * Checks to see whether two birthdates are the same.	 */	public boolean equals(Object theOther){		BirthDate theBirthDate = (BirthDate)theOther;		return myMonth == theBirthDate.myMonth				&& myDay == theBirthDate.myDay				&& myYear == theBirthDate.myYear;	}//equals	/**	 * Checks whether the current birthdate is before the parameter chronologically.	 * @param theBirthDate The birthdate to be compared.	 * @return Returns True if the invoking birthdate is before the parameter, false if the invoking parameter is not before the parameter.	 */	public boolean before(BirthDate theBirthDate){		return compareTo(theBirthDate) < 0;	}//before	/**	 * Checks whether the current birthdate is after the parameter chronologically.	 * @param theBirthDate The birthdate to be compared.	 * @return Returns true if the invoking birthdate is after the parameter, false if the invoking parameter is not after the parameter.	 */	public boolean after(BirthDate theBirthDate){		return compareTo(theBirthDate) > 0;	}//after	/**	 * The ordering by which birthdates are compared. First checks the month, then the day, then the optional year.	 */	public int compareTo(BirthDate theBirthDate){		int compareMonth = myMonth - theBirthDate.myMonth;		if(compareMonth !=0){			return compareMonth;		}//if months the same, continue		int compareDay = myDay - theBirthDate.myDay;		if(compareDay !=0){			return compareDay;		}//months and days were the same, continue		return myYear - theBirthDate.myYear;//Depends on default value for year	}//compareTo	/**	 * String representation of the birthdate.	 */	public String toString(){		if(myMonth == 0) {			return "";		}//if default birthdate with no data		return MONTH_NAMES[myMonth] + " " + myDay + (myYear !=0 ? ", " + myYear : "");	}//toString}//class BirthDate